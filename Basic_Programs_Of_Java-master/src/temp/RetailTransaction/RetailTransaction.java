package temp.RetailTransaction;

import java.util.*;

class Product {
    private String name;
    private double price;

    public Product(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

class ShoppingCart {
    private List<Product> cart;

    public ShoppingCart() {
        this.cart = new ArrayList<>();
    }

    public void addProduct(Product product) {
        cart.add(product);
        System.out.println(product.getName() + " added to cart.");
    }

    public double getTotalAmount() {
        double total = 0;
        for (Product p : cart) {
            total += p.getPrice();
        }
        return total;
    }

    public void displayCart() {
        System.out.println("\nüõí Cart Items:");
        for (Product p : cart) {
            System.out.println("- " + p.getName() + " : ‚Çπ" + p.getPrice());
        }
        System.out.println("Total: ‚Çπ" + getTotalAmount());
    }
}

class PaymentProcessor {
    public static boolean processPayment(double amount, String paymentMethod) {
        if (amount <= 0) {
            System.out.println("Invalid amount.");
            return false;
        }
        System.out.println("Processing payment of ‚Çπ" + amount + " via " + paymentMethod + "...");
        return true;
    }
}

public class RetailTransaction {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ShoppingCart cart = new ShoppingCart();

        // Sample products
        List<Product> products = Arrays.asList(
                new Product("Laptop", 50000),
                new Product("Headphones", 2000),
                new Product("Smartphone", 30000),
                new Product("Keyboard", 1500)
        );

        while (true) {
            // Display product list
            System.out.println("\nüì¶ Available Products:");
            for (int i = 0; i < products.size(); i++) {
                System.out.println((i + 1) + ". " + products.get(i).getName() + " - ‚Çπ" + products.get(i).getPrice());
            }
            System.out.println("5. Checkout");

            System.out.print("Choose a product to add to cart (1-4) or 5 to checkout: ");
            int choice = scanner.nextInt();

            if (choice >= 1 && choice <= 4) {
                cart.addProduct(products.get(choice - 1));
            } else if (choice == 5) {
                cart.displayCart();
                break;
            } else {
                System.out.println("Invalid choice. Try again.");
            }
        }

        // Payment
        if (cart.getTotalAmount() > 0) {
            System.out.println("\nüí≥ Payment Methods:");
            System.out.println("1. Credit Card");
            System.out.println("2. Debit Card");
            System.out.println("3. UPI");
            System.out.print("Choose payment method (1-3): ");
            int paymentChoice = scanner.nextInt();

            String paymentMethod;
            switch (paymentChoice) {
                case 1:
                    paymentMethod = "Credit Card";
                    break;
                case 2:
                    paymentMethod = "Debit Card";
                    break;
                case 3:
                    paymentMethod = "UPI";
                    break;
                default:
                    paymentMethod = "Unknown";
            }


            if (!paymentMethod.equals("Unknown") && PaymentProcessor.processPayment(cart.getTotalAmount(), paymentMethod)) {
                System.out.println("\n‚úÖ Payment Successful! Thank you for shopping.");
            } else {
                System.out.println("\n‚ùå Payment Failed. Please try again.");
            }
        } else {
            System.out.println("Your cart is empty.");
        }

        scanner.close();
    }
}
/*
Output
üì¶ Available Products:
1. Laptop - ‚Çπ50000
2. Headphones - ‚Çπ2000
3. Smartphone - ‚Çπ30000
4. Keyboard - ‚Çπ1500
5. Checkout
Choose a product to add to cart (1-4) or 5 to checkout: 1
Laptop added to cart.

üì¶ Available Products:
1. Laptop - ‚Çπ50000
2. Headphones - ‚Çπ2000
3. Smartphone - ‚Çπ30000
4. Keyboard - ‚Çπ1500
5. Checkout
Choose a product to add to cart (1-4) or 5 to checkout: 3
Smartphone added to cart.

üõí Cart Items:
- Laptop : ‚Çπ50000
- Smartphone : ‚Çπ30000
Total: ‚Çπ80000

üí≥ Payment Methods:
1. Credit Card
2. Debit Card
3. UPI
Choose payment method (1-3): 2
Processing payment of ‚Çπ80000 via Debit Card...

‚úÖ Payment Successful! Thank you for shopping.

Features Used
‚úÖ Encapsulation ‚Äì Used for Product, ShoppingCart, and PaymentProcessor.
‚úÖ Polymorphism (Method Overloading) ‚Äì Different constructors for adding products.
‚úÖ Collections (ArrayList) ‚Äì To store cart items dynamically.
‚úÖ User Interaction (Scanner) ‚Äì To select products and payment methods.
 */